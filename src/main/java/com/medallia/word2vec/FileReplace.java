package com.medallia.word2vec.test0;import com.medallia.word2vec.ReadFileXml;import org.w3c.dom.Document;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import javax.xml.transform.*;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import java.io.*;import java.util.ArrayList;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;public class FileReplace {    List<String> lines = new ArrayList<String>();    String line = null;    String f = "bestAns_store.xml";//    static String[] regex = {"<br>", "<br />", "(?i)he's", "(?i)she's", "(?i)i'm", "(?i)it's", "(?i)you're", "(?i)we're",//            "(?i)they're", "(?i)wasn't", "(?i)weren't", "(?i)don't", "(?i)doesn't", "(?i)didn't", "(?i)isn't",//            "(?i)aren't", "(?i)i've","(?i)you've","(?i)they've","(?i)we've", "(?i)haven't", "(?i)hasn't", "(?i)couldn't", "(?i)can't", "(?i)wouldn't",//            "(?i)hadn't", "(?i)shan't", "(?i)mustn't", "(?i)shouldn't", "(?i)i'll", "(?i)he'll",//            "(?i)she'll", "(?i)it'll", "(?i)they'll", "(?i)we'll", "(?i)you'll", "(?i)let's"};//    static String[] strReplace = {"", "", "he is", "she is", "i am", "it is", "you are", "we are", "they are", "was not",//            "were not", "do not", "does not", "did not", "is not", "are not", "i have","you have","they have","we have", "have not", "has not",//            "could not", "can not", "would not", "had not", "shall not", "must not", "should not", "i will",//            "he will", "she will", "it will", "they will", "we will", "you will", "let us"};    public String[] regex = {"<br>","<br />","(?i)let's","(?i)\\s*'s\\s+","(?i)\\s*'m\\s+","(?i)\\s*'re\\s+",            "(?i)n\\s*'t\\s+", "(?i)\\s*'ve\\s+","(?i)\\s*'ll\\s+"};    public String[] strReplace = {"", "", "let us", " is ", " am ", " are ", " not ", " have ", " will "};    Pattern p = Pattern.compile("<bestanswer>.*</bestanswer>");    Matcher m            ;    public String replaceS(String s) {        for (int i = 0; i < regex.length; i++)            s = s.replaceAll(regex[i], strReplace[i]);        return s;    }    public String removeTag(String s){//        String a = "<uri>.*</uri>";////        String b = "<nbestanswers>.*</nbestanswers>";//        String c = "<yid>.*</yid>";//        String d = "<best_yid>.*</best_yid>";//        String e = "<cat>.*</cat>";//        String f = "<subcat>.*</subcat>";////        String g = "<content>.*</content>";//        s = s.replaceAll(a,"");////        s = s.replaceAll(b,"");//        s = s.replaceAll(c,"");//        s = s.replaceAll(d,"");//        s = s.replaceAll(e,"");//        s = s.replaceAll(f,"");////        s = s.replaceAll(g,"");        return s;    }    void parse() {        try {            //Parse xml File            File inputXML = new File("manner.xml");            FileWriter writer = new FileWriter(f);            DocumentBuilderFactory parser = DocumentBuilderFactory.newInstance(); // new instance of doc builder            DocumentBuilder dParser = parser.newDocumentBuilder(); // calls it            Document doc = dParser.parse(inputXML); // parses file            FileReader reader = new FileReader(inputXML);            String newString;            BufferedReader br = new BufferedReader(reader);            writer.write("<document>");            while ((newString = br.readLine()) != null) {                 m = p.matcher(newString);                 while (m.find())                    writer.write("\n"+m.group(0));            }            writer.write("\n</document>");            writer.close();            System.out.println("Parsed");        } catch (ParserConfigurationException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (SAXException e) {            e.printStackTrace();        }    }    public void trandsferXML(Document doc){        NodeList nList = doc.getElementsByTagName("document");        for(int i=0; i<nList.getLength(); i++){            Node subject =nList.item(i).getFirstChild();            subject.setTextContent(replaceS(subject.getTextContent()));            if(i%1000==0) System.out.println(i);        }        System.out.println("transfered");        writeXML(doc);    }    public void writeXML(Document doc) {        try {            Source source = new DOMSource(doc);            Result result = new StreamResult(f);            Transformer trans = TransformerFactory.newInstance().newTransformer();            trans.transform(source, result);        } catch (Exception ex) {            ex.printStackTrace();        }    }    public static void main(String[] args){        FileReplace a = new FileReplace();        a.parse();        a.writeXML(ReadFileXml.readFileXml(a.f));    }}